prob 2:

algorithm: The algorithm can be improved further by observing that all primes are of the form 6k ± 1, with the exception of 2 and 3. This is because all integers can be expressed as (6k + i) for some integer k and for i = −1, 0, 1, 2, 3, or 4; 2 divides (6k + 0), (6k + 2), (6k + 4); and 3 divides (6k + 3). So a more efficient method is to test if n is divisible by 2 or 3, then to check through all the numbers of form 6k ± 1 \scriptstyle{}\leq\sqrt n. This is 3 times as fast as testing all m.

// prob2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdio.h"
#include "malloc.h"
#include "conio.h"

void primeGeneration(unsigned long,unsigned long,int );
bool isprime(unsigned long);
int main()
{
	int t,j,f;
	unsigned long m,n;
	scanf("%d",&t);
	for(j=0;j<t;j++)
	{
		scanf("%d %d",&m,&n);
	    primeGeneration(m,n,t);
		printf("\n");
	}
	getch();
	return 0;
}

void primeGeneration(unsigned long m,unsigned long n,int t)
{
	unsigned long i;
	for(i=m;i<=n;i++)
	{
		if(i<=3)
		{
		if(i==2 || i==3)
		   {
			printf("%ld\n",i);
		   }
		}
		else
		{
			if(isprime(i))
			{
				printf("%ld\n",i);
			}
		}

		}
	}

bool isprime(unsigned long i)
{
	unsigned long j;

	if((i%2)==0||(i%3)==0)
		 {
				return false;
		 }
		 else
			{
				for(j=5;j*j<=i;j+=6)
				{
					if((j%i==0) || (j%(i+2)))
					{
						return false;
					}
					else
					{
						return true;
					}
				}
	}
}